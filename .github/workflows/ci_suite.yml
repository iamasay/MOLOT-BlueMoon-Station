name: CI Suite
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
    - upstream-merge
jobs:
  run_linters:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Run Linters
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Restore SpacemanDMM cache
        uses: actions/cache@v4
        with:
          path: ~/SpacemanDMM
          key: ${{ runner.os }}-spacemandmm-${{ secrets.CACHE_PURGE_KEY }}
      - name: Restore Yarn cache
        uses: actions/cache@v4
        with:
          path: tgui/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ secrets.CACHE_PURGE_KEY }}-${{ hashFiles('tgui/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ secrets.CACHE_PURGE_KEY }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Tools
        run: |
          pip3 install setuptools --upgrade
          bash tools/ci/install_node.sh
          bash tools/ci/install_spaceman_dmm.sh dreamchecker
          tools/bootstrap/python -c ''
      - name: Run Linters
        run: |
          bash tools/ci/check_filedirs.sh tgstation.dme
          bash tools/ci/check_changelogs.sh
          bash tools/ci/check_grep.sh
          find . -name "*.php" -print0 | xargs -0 -n1 php -l
          find . -name "*.json" -not -path "*/node_modules/*" -print0 | xargs -0 python3 ./tools/json_verifier.py
          tools/build/build --ci lint
          tools/bootstrap/python -m dmi.test
          tools/bootstrap/python -m mapmerge2.dmm_test
          ~/dreamchecker > ${GITHUB_WORKSPACE}/output-annotations.txt 2>&1
      - name: Annotate Lints
        uses: yogstation13/DreamAnnotate@v2
        if: always()
        with:
          outputFile: output-annotations.txt

  compile_all_maps:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Compile Maps
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Restore BYOND cache
        uses: actions/cache@v4
        with:
          path: ~/BYOND
          key: ${{ runner.os }}-byond-${{ secrets.CACHE_PURGE_KEY }}
      - name: Compile All Maps
        run: |
          bash tools/ci/install_byond.sh
          source $HOME/BYOND/byond/bin/byondsetup
          tools/build/build --ci dm -DCIBUILDING -DCITESTING -DALL_MAPS
  find_all_maps:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Find Maps to Test
    runs-on: ubuntu-22.04
    outputs:
      maps: ${{ steps.map_finder.outputs.maps }}
    steps:
      - uses: actions/checkout@v2
      - name: Find Maps
        id: map_finder
        run: |
          echo "$(ls -mw0 _maps/*.json)" > maps_output.txt
          sed -i -e s+_maps/+\"+g -e s+.json+\"+g maps_output.txt
          echo "Maps: $(cat maps_output.txt)"
          echo "::set-output name=maps::{\"paths\":[$(cat maps_output.txt)]}"
  run_all_tests:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Integration Tests
    runs-on: ubuntu-22.04
    needs: [find_all_maps]
    strategy:
      fail-fast: false
      matrix:
        map: ${{ fromJSON(needs.find_all_maps.outputs.maps).paths }}
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    concurrency:
      group: ci-${{ github.ref }}-${{ matrix.map }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Restore BYOND cache
        uses: actions/cache@v4
        with:
          path: ~/BYOND
          key: ${{ runner.os }}-byond-${{ secrets.CACHE_PURGE_KEY }}
      - name: Restore Yarn cache
        uses: actions/cache@v4
        with:
          path: tgui/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ secrets.CACHE_PURGE_KEY }}-${{ hashFiles('tgui/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ secrets.CACHE_PURGE_KEY }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup database
        run: |
          sudo systemctl start mysql
          mysql -u root -proot -e 'CREATE DATABASE tg_ci;'
          mysql -u root -proot tg_ci < SQL/tgstation_schema.sql
          mysql -u root -proot -e 'CREATE DATABASE tg_ci_prefixed;'
          mysql -u root -proot tg_ci_prefixed < SQL/tgstation_schema_prefixed.sql
      - name: Install rust-g
        run: |
          bash tools/ci/install_rust_g.sh
      - name: Install auxmos
        run: |
          sudo apt update || true
          bash tools/ci/install_auxmos.sh
      - name: Compile and run tests
        run: |
          bash tools/ci/install_byond.sh
          source $HOME/BYOND/byond/bin/byondsetup
          tools/build/build --ci -DCIBUILDING
          bash tools/ci/run_server.sh ${{ matrix.map }}
